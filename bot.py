import logging
from aiogram import Bot, Dispatcher, executor, types
from config import TELEGRAM_BOT_TOKEN
from data_handler import DataHandler
from predictor import Predictor

logging.basicConfig(level=logging.INFO)

bot = Bot(token=TELEGRAM_BOT_TOKEN)
dp = Dispatcher(bot)

data_handler = DataHandler()
predictor = Predictor()

MAIN_MENU = types.ReplyKeyboardMarkup(resize_keyboard=True)
MAIN_MENU.add(
    types.KeyboardButton("‚öΩ Live Football"),
    types.KeyboardButton("üìÖ Pre-Match Football")
)
MAIN_MENU.add(
    types.KeyboardButton("üéæ Live Tennis"),
    types.KeyboardButton("üéæ Pre-Match Tennis")
)

@dp.message_handler(commands=['start'])
async def start_handler(message: types.Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏ —Ä–µ–∂–∏–º:", reply_markup=MAIN_MENU)

@dp.message_handler(lambda m: m.text == "‚öΩ Live Football")
async def live_football_handler(message: types.Message):
    data = data_handler.get_live_football()
    if not data or not data.get('response'):
        await message.answer("–ù–µ—Ç live —Ñ—É—Ç–±–æ–ª—å–Ω—ã—Ö –º–∞—Ç—á–µ–π.")
        return

    matches = []
    for fixture in data['response']:
        league = fixture['league']['name']
        teams = f"{fixture['teams']['home']['name']} - {fixture['teams']['away']['name']}"
        score = fixture['goals']['home'], fixture['goals']['away']
        time = fixture['fixture']['status']['elapsed']
        match_id = str(fixture['fixture']['id'])
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ñ–∏–∫—Ç–∏–≤–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏, –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–µ
        features = [score[0], score[1], time]
        predictions = predictor.predict(features)
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º 3 –≤–∞—Ä–∏–∞–Ω—Ç–∞ —Å—Ç–∞–≤–æ–∫
        bets = []
        for pred, prob in predictions:
            bets.append(f"{pred}: {prob*100:.1f}%")
        bets_text = "\n".join(bets) if bets else "–ü—Ä–æ–≥–Ω–æ–∑–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç."
        matches.append(f"{league}: {teams} | {score[0]}:{score[1]} ({time} –º–∏–Ω)\n{bets_text}")
    await message.answer("\n\n".join(matches))

@dp.message_handler(lambda m: m.text == "üìÖ Pre-Match Football")
async def prematch_football_handler(message: types.Message):
    data = data_handler.get_prematch_football()
    if not data or not data.get('response'):
        await message.answer("–ù–µ—Ç –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö —Ñ—É—Ç–±–æ–ª—å–Ω—ã—Ö –º–∞—Ç—á–µ–π.")
        return
    matches = []
    for fixture in data['response']:
        league = fixture['league']['name']
        teams = f"{fixture['teams']['home']['name']} - {fixture['teams']['away']['name']}"
        date = fixture['fixture']['date'].replace("T", " ")[:16]
        matches.append(f"{league}: {teams} | {date}")
    await message.answer("\n".join(matches))

@dp.message_handler(lambda m: m.text == "üéæ Live Tennis")
async def live_tennis_handler(message: types.Message):
    data = data_handler.get_live_tennis()
    if not data:
        await message.answer("–ù–µ—Ç live —Ç–µ–Ω–Ω–∏—Å–Ω—ã—Ö –º–∞—Ç—á–µ–π.")
        return
    matches = []
    for event in data:
        teams = f"{event['home_team']} - {event['away_team']}"
        # –ü—Ä–∏–º–µ—Ä –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –∏ –ø—Ä–æ–≥–Ω–æ–∑–æ–≤, –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–µ
        features = [0]  # –ó–∞–ø–æ–ª–Ω–∏—Ç—å –Ω—É–∂–Ω—ã–º–∏ –ø—Ä–∏–∑–Ω–∞–∫–∞–º–∏
        predictions = predictor.predict(features)
        bets = []
        for pred, prob in predictions:
            bets.append(f"{pred}: {prob*100:.1f}%")
        bets_text = "\n".join(bets) if bets else "–ü—Ä–æ–≥–Ω–æ–∑–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç."
        matches.append(f"{teams} | LIVE\n{bets_text}")
    await message.answer("\n\n".join(matches))

@dp.message_handler(lambda m: m.text == "üéæ Pre-Match Tennis")
async def prematch_tennis_handler(message: types.Message):
    data = data_handler.get_prematch_tennis()
    if not data:
        await message.answer("–ù–µ—Ç –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö —Ç–µ–Ω–Ω–∏—Å–Ω—ã—Ö –º–∞—Ç—á–µ–π.")
        return
    matches = []
    for event in data:
        teams = f"{event['home_team']} - {event['away_team']}"
        matches.append(f"{teams} | {event.get('commence_time', '')}")
    await message.answer("\n".join(matches))

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
